{
    // This template is expected to be called as a linked template. The parent will contain all the logic to correctly build all the resource names etc.
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "AvdArtifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/Azure/RDS-Templates/master/ARM-wvd-templates/DSC/Configuration.zip",
            "metadata": {
                "description": "URL to the location of the required AVD artifacts."
            }
        },
        "HostPoolName": {
            "type": "string",
            "metadata": {
                "description": "Name of the AVD Host Pool to which the session hosts will associate."
            }
        },
        "HostPoolRegistrationToken": {
            "type": "securestring",
            "metadata": {
                "description": "The registration token for the session hosts to use to associate with the specified Host Pool."
            }
        },
        "AvailabilitySetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Availability Set to create."
            }
        },
        "AvailabilitySetTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags that will apply to the resource."
            }
        },
        "AvailabilitySetLocation": {
            "type": "string",
            "metadata": {
                "description": "Location of the Availability Set."
            }
        },
        "SessionHostsNumberToDeploy": {
            "type": "int",
            "metadata": {
                "description": "The number of session Hosts to deploy."
            }
        },
        "SessionHostNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "The computer name prefix for the session hosts."
            }
        },
        "SessionHostNameInitialNumber": {
            "type": "int",
            "metadata": {
                "description": "The initial instance number for the session host. e.g. Setting 4 will mean the session host numbering starts from 4 resulting in VMNAME-4 onwards."
            }
        },
        "SessionHostNumberPadding": {
            "type": "int",
            "metadata": {
                "description": "Padding for the instance number. e.g. setting 3 will use 004 instead of 4 or 04 resulting in VMNAME-004."
            }
        },
        "SessionHostLocation": {
            "type": "string",
            "metadata": {
                "description": "Azure region for the session host deployment."
            }
        },
        "SessionHostTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags that will apply to the resource."
            }
        },
        "SessionHostVmSize": {
            "type": "string",
            "metadata": {
                "description": "Size of the Azure VM that will be the AVD Session Host."
            }
        },
        "SessionHostVmEnableTrustedLaunch": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable Trusted Launch on the Session Host VM. Trusted launch protects against advanced and persistent attack techniques such as rootkits, boot kits, and kernel-level malware. It provides Secure boot, Virtualisation Based Security, vTPM capabilities and is only supported on Gen2 VMs."
            }
        },
        "SessionHostLocalAdminUsername": {
            "type": "securestring",
            "metadata": {
                "description": "Local administrator username for each Session Host."
            }
        },
        "SessionHostLocalAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Local administrator password for each of the Session Hosts."
            }
        },
        "SessionHostOSDiskNameSuffix": {
            "type": "string",
            "defaultValue": "-OSDisk",
            "metadata": {
                "description": "The name to append onto the OS disk name. e.g. if '-OSDisk' the disk object becomes VMNAME-OSDisk."
            }
        },
        "SessionHostOSDiskType": {
            "type": "string",
            "metadata": {
                "description": "The Disk Type for each Session Hosts OS disk."
            }
        },
        "SessionHostOSDiskSizeGB": {
            "type": "int",
            "metadata": {
                "description": "Size of each Session Hosts OS disk in GB"
            }
        },
        "SessionHostSourceImageID": {
            "type": "string",
            "metadata": {
                "description": "Session host source image ID. This can be a Shared Image Gallery ID or Managed Image ID."
            }
        },
        "SessionHostEnableBootDiagnostics": {
            "type": "bool",
            "defaultValue" : false,
            "metadata": {
                "description": "Enable or disable managed boot diagnostics on each session host VM. This will be disabled by default."
            }
        },
        "SessionHostEnableIaaSAntimalware": {
            "type": "bool",
            "defaultValue" : false,
            "metadata": {
                "description": "Enable IaaSAntimalware extension on each of the Session Hosts. This assumes that GPO (or other method) will configure specific malware settings on the session hosts after deployment."
            }
        },
        "SessionHostEnableBitLocker": {
            "type": "bool",
            "defaultValue" : false,
            "metadata": {
                "description": "Enable Bitlocker OS disk encryption on each of the Session Hosts."
            }
        },
        "SessionHostBitLockerKeyEncryptionAlgorithm": {
            "type": "string",
            "allowedValues": [
                "RSA-OAEP",
                "RSA-OAEP-256",
                "RSA1_5"
            ],
            "defaultValue": "RSA-OAEP",
            "metadata": {
                "description": "Specify the required BitLocker KeyEncryptionAlgorithm to use."
            }
        },
        "SessionHostAvailabilityZonesEnable": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specify if to deploy session hosts into an Availability Zone. Default is to use Availability Sets and not use Zones."
            }
        },
        "SessionHostAvailabilityZonesFixed": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "When SessionHostAvailabilityZonesEnable = TRUE and this value is TRUE Specify that all session hosts should be deployed into the same Availability Zone (The Zone is specified using the value of SessionHostAvailabilityZone) or when FALSE (default) deploy evenly, round robin style across all Availability Zones. E.g. if SessionHostAvailabilityZone=3 when deploying 7 session hosts 3-Zone1, 2-Zone2, 2-Zone2 etc."
            }
        },
        "SessionHostAvailabilityZone": {
            "type": "int",
            "defaultValue": 3,
            "minValue": 1,
            "maxValue": 3,            
            "metadata": {
                "description": "When SessionHostAvailabilityZonesEnable = TRUE this will Specify which Availability Zone to deploy all session hosts into (SessionHostAvailabilityZonesFixed = TRUE) OR split across following a round robin style (SessionHostAvailabilityZonesFixed = FALSE)."
            }
        },
        "BitLockerKeyVaultURL": {
            "type": "string",
            "metadata": {
                "description": "URL of the KeyVault to store BitLocker recovery data."
            }
        },
        "BitlockerKeyVaultResourceId": {
            "type": "string",
            "metadata": {
                "description": "ID of the KeyVault to store BitLocker recovery data."
            }
        },
        "SessionHostJoinType": {
            "type": "string",
            "allowedValues": [
                "AzureADJoin",
                "WindowsADJoin"
            ],
            "defaultValue": "WindowsADJoin",
            "metadata": {
                "description": "Specify if the session host should be joined to a traditional Windows Active Directory (on-premises) domain or if it should be 'Cloud Native' and Azure AD Joined only. For Hybrid Azure AD Joined use WindowsADJoin."
            }
        },
        "SessionHostIntuneEnroll": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specify if to enrol the Session Host VM into Intune management as part of the AzureADJoin process. This settings does not apply to WindowsADJoin devices where GPO or MEMCM must be used to trigger Intune enrolment."
            }
        },
        "DomJoinDomainToJoin": {
            "type": "string",
            "metadata": {
                "description": "DNS domain name of the Active Directory domain to join."
            }
        },
        "DomJoinOUPath": {
            "type": "string",
            "metadata": {
                "description": "The OU path of where to place the computer object during the domain join process."
            }
        },
        "DomJoinUsername": {
            "type": "securestring",
            "metadata": {
                "description": "Domain Join user name."
            }
        },
        "DomJoinPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Domain join password."
            }
        },
        "NicNamePrefix": {
            "type": "string",
            "defaultValue": "NIC-",
            "metadata": {
                "description": "Prefix for the name of the NIC. NIC name by default will match the VMName with this value used as a prefix. e.g. NIC-VMNAME05."
            }
        },
        "NicNameSuffix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Suffix for the name of the NIC. NIC name by default will match the VMName with this value used as a suffix. e.g. VNAME05-VNIC."
            }
        },
        "NicNameNumberSuffix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Instance number to add to the end of the NIC name. NIC name by default will match the VMName with this value used as a suffix e.g. NIC-VMNAME05-VNIC01."
            }
        },
        "NicTags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags that will apply to the resource."
            }
        },
        "NicSubnetID": {
            "type": "string",
            "metadata": {
                "description": "ID of the subnet for the NICs."
            }
        },
        "NicEnableAcceleratedNetworking": {
            "type": "bool",
            "metadata": {
                "description": "Enable or disable NIC acceleration."
            }
        },
        "EnableMonitoring": {
            "type": "bool",
            "metadata": {
                "description": "Enable monitoring on the resources that are to be deployed."
            }
        },
        "LawWorkspaceId": {
            "type": "securestring",
            "metadata": {
                "description": "ID of the Log Analytics Workspace to use for monitoring."
            }
        },
        "LawPrimaryKey": {
            "type": "securestring",
            "metadata": {
                "description": "Primary Key for the Log Analytics Workspace to use for monitoring."
            }
        }
    },
    "functions": [],
    "variables": {
        // https://www.dcac.com/blog/dynamically-assigning-an-availability-set-to-a-vm-in-an-arm-template
        "AvailabilitySetID": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets/', parameters('AvailabilitySetName'))]"
        },

        // Trusted Launch https://docs.microsoft.com/en-us/azure/virtual-machines/trusted-launch
        "TrustedLaunch": "[if(parameters('SessionHostVmEnableTrustedLaunch'),variables('TrustedLaunchConfigurationSettings'),'')]",        
        "TrustedLaunchConfigurationSettings":{
            "uefiSettings":{
                "secureBootEnabled": true,
                "vTpmEnabled": true
            },
            "securityType": "TrustedLaunch"
        },        

        // Azure AD Join - True or False
        "AzureADJoin": "[if(equals(parameters('SessionHostJoinType'),'AzureADJoin'),true(),false())]",        
        "SessionHostIdentity": "[if(variables('AzureADJoin'),'SystemAssigned','None')]" // SystemAssigned, UserAssigned, SystemAssigned, UserAssigned, None
    },
    "resources": [
        
        // Create Availability Set when deploying Session Hosts, but only when not using Availability Zones.
        {
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2019-07-01",
            "name": "[parameters('AvailabilitySetName')]",
            "tags": "[parameters('AvailabilitySetTags')]",
            "location": "[parameters('AvailabilitySetLocation')]",
            "condition": "[and(greater(parameters('SessionHostsNumberToDeploy'),0),not(parameters('SessionHostAvailabilityZonesEnable')))]",
            "properties": {
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 5
            },
            "sku": {
                "name": "Aligned"
            }
        },

        // Create Network Interfaces for VMs.
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-05-01",                    
            "name": "[concat(parameters('NicNamePrefix'),parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'),parameters('NicNameSuffix'),parameters('NicNameNumberSuffix'))]",
            "tags": "[parameters('NicTags')]",
            "copy": {
                "name": "Session-Host-NIC-Loop",
                "count": "[parameters('SessionHostsNumberToDeploy')]"
            },
            "location":"[parameters('SessionHostLocation')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[parameters('NicSubnetID')]"
                            }
                        }
                    }
                ],
                "enableAcceleratedNetworking": "[parameters('NicEnableAcceleratedNetworking')]",
                "networkSecurityGroup": "[json('null')]"
            }
        },

        // Create VMs (Session Hosts).
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2020-12-01",
            "name": "[concat(parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'))]",
            "tags": "[parameters('SessionHostTags')]",
            "location": "[parameters('SessionHostLocation')]",
            "copy": {
                "name": "Session-Host-VM-Loop",
                "count": "[parameters('SessionHostsNumberToDeploy')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('NicNamePrefix'),parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'),parameters('NicNameSuffix'),parameters('NicNameNumberSuffix')))]",                
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('AvailabilitySetName'))]"
            ],
            "identity": {
                "type": "[variables('SessionHostIdentity')]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('SessionHostVmSize')]"
                },
                // Do not associate with an Availability Set if Zones are being used.
                "availabilitySet": "[if(parameters('SessionHostAvailabilityZonesEnable'),json('null'),variables('AvailabilitySetID'))]",
                "osProfile": {
                    "computerName": "[concat(parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'))]",
                    "adminUsername": "[parameters('SessionHostLocalAdminUsername')]",
                    "adminPassword": "[parameters('SessionHostLocalAdminPassword')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[parameters('SessionHostOSDiskType')]"
                        },
                        "name": "[concat(parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),3,'0'),parameters('SessionHostOSDiskNameSuffix'))]",
                        "diskSizeGB": "[parameters('SessionHostOSDiskSizeGB')]"                        
                    },
                    "imageReference": {
                        "id": "[parameters('SessionHostSourceImageID')]"
                    }
                },
                // Trusted Launch 
                "securityProfile": "[variables('TrustedLaunch')]",                
                "networkProfile": {
                    "networkInterfaces": [
                        {                                  
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('NicNamePrefix'),parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'),parameters('NicNameSuffix'),parameters('NicNameNumberSuffix')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "[parameters('SessionHostEnableBootDiagnostics')]"
                    }
                },
                "licenseType": "Windows_Client"
            },
            // Only associate with an Availability Zone if specified. By default use an Availability Set.
            // Where using Availability Zones, either place all Session Hosts into the same Zone or split evenly across Zones round robin style
            "zones": "[if(parameters('SessionHostAvailabilityZonesEnable'),if(parameters('SessionHostAvailabilityZonesFixed'),array(parameters('SessionHostAvailabilityZone')),if(greaterOrEquals(parameters('SessionHostsNumberToDeploy'),2),array(split(string(add(mod(copyIndex(),parameters('SessionHostAvailabilityZone')),1)), ',')),'')),'')]"            
        },

        // Domain Join VMs (Session Hosts) - Windowws Active Directory Domain Join (on-premises AD).
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-07-01",
            "name": "[concat(parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'),'/DomainJoin')]",
            "location": "[parameters('SessionHostLocation')]",
            "condition": "[equals(parameters('SessionHostJoinType'),'WindowsADJoin')]",
            //"dependsOn": ["Session-Host-VM-Loop"],
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',concat(parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0')))]"
            ],
            "copy": {
                "name": "Session-Host-DomainJoin-Loop",
                "count": "[parameters('SessionHostsNumberToDeploy')]"
            },
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "name": "[parameters('DomJoinDomainToJoin')]",
                    "ouPath": "[parameters('DomJoinOUPath')]",
                    "user": "[parameters('DomJoinUsername')]",
                    "restart": "true",
                    "options": "3"
                },
                "protectedSettings": {
                    "password": "[parameters('DomJoinPassword')]"
                }
            }                
        },

        // Azure AD Join VMs (Session Hosts) - Cloud Native
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion" : "2020-12-01",
            "name": "[concat(parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'),'/AzureADJoin')]",
            "location": "[parameters('SessionHostLocation')]",
            "condition": "[and(equals(parameters('SessionHostJoinType'),'AzureADJoin'),not(parameters('SessionHostIntuneEnroll')))]",
            //"dependsOn": ["Session-Host-VM-Loop"],
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',concat(parameters('SessionHostNamePrefix'), padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0')))]"
            ],
            "copy": {
                "name": "Session-Host-AzureADJoin-Loop",
                "count": "[parameters('SessionHostsNumberToDeploy')]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true
            }
        },

        // Azure AD Join VMs (Session Hosts) and Intune enrolment - Cloud Native with Intune (MEM)
        // NOT YET SUPPORTED!!
        // Enrolment triggered using the device credential - results in MDM Enroll: Failed (Unknown Win32 Error code: 0x80180001)
        // https://docs.microsoft.com/en-us/windows/client-management/mdm/enroll-a-windows-10-device-automatically-using-group-policy
        // Device Credential is only supported for Microsoft Intune enrollment in scenarios with Co-management or Azure Virtual Desktop.
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion" : "2020-12-01",
            "name": "[concat(parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'),'/AzureADJoinWithIntune')]",
            "location": "[parameters('SessionHostLocation')]",
            "condition": "[and(equals(parameters('SessionHostJoinType'),'AzureADJoin'),parameters('SessionHostIntuneEnroll'))]",
            //"dependsOn": ["Session-Host-VM-Loop"],
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines',concat(parameters('SessionHostNamePrefix'), padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0')))]"
            ],            
            "copy": {
                "name": "Session-Host-AzureADJoinWithIntune-Loop",
                "count": "[parameters('SessionHostsNumberToDeploy')]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "mdmId": "0000000a-0000-0000-c000-000000000000" // Intune AppID
                }
            }
        },

        // Register VMs (Session Hosts) to the AVD Service.
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-07-01",
            "name": "[concat(parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'),'/SessionHostRegistration')]",
            "location": "[parameters('SessionHostLocation')]",
            //"dependsOn": [
            //    "Session-Host-DomainJoin-Loop",
            //    "Session-Host-AzureADJoin-Loop",
            //    "Session-Host-AzureADJoinWithIntune-Loop"],
            "dependsOn":[
                "[resourceId('Microsoft.Compute/virtualMachines',concat(parameters('SessionHostNamePrefix'), padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0')),'DomainJoin')]",
                "[resourceId('Microsoft.Compute/virtualMachines',concat(parameters('SessionHostNamePrefix'), padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0')),'AzureADJoin')]",
                "[resourceId('Microsoft.Compute/virtualMachines',concat(parameters('SessionHostNamePrefix'), padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0')),'AzureADJoinWithIntune')]"
            ],
            "copy": {
                "name": "Session-Host-Registration-Loop",
                "count": "[parameters('SessionHostsNumberToDeploy')]"
            },
            "properties": {
                "publisher": "Microsoft.Powershell",
                "type": "DSC",
                "typeHandlerVersion": "2.73",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "modulesUrl": "[parameters('AvdArtifactsLocation')]",
                    "configurationFunction": "Configuration.ps1\\AddSessionHost",
                    "properties": {
                        "hostPoolName": "[parameters('HostPoolName')]",
                        "registrationInfoToken": "[parameters('HostPoolRegistrationToken')]",
                        "aadJoin": "[variables('AzureADJoin')]"
                    }
                }
            }            
        },        

        {
            // Enable Session Host (VM) Diagnostics (Insights).
            "apiVersion": "2018-10-01",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'),'/MicrosoftMonitoringAgent')]",
            "condition": "[equals(parameters('EnableMonitoring'),true())]",
            "location": "[parameters('SessionHostLocation')]",
            //"dependsOn": ["Session-Host-Registration-Loop"],
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions',concat(parameters('SessionHostNamePrefix'), padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0')),'SessionHostRegistration')]"
            ],
            "copy": {
                "name": "Session-Host-MicrosoftMonitoringAgent-Loop",
                "count": "[parameters('SessionHostsNumberToDeploy')]"
            },
            "properties": {
                "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                "type": "MicrosoftMonitoringAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "workspaceId": "[parameters('LawWorkspaceId')]"
                },
                "protectedSettings": {
                    "workspaceKey": "[parameters('LawPrimaryKey')]"
                }
            }
        },        

        // Enable Antimalware Extension - this enables rollup reporting to Azure Security Centre. Assumes that GPO will be controlling the speciific configuration on the endpoint settings.
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'),'/IaaSAntimalware')]",
            "apiVersion": "2020-12-01",
            "location": "[parameters('SessionHostLocation')]",
            //"dependsOn": ["Session-Host-Registration-Loop"],
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions',concat(parameters('SessionHostNamePrefix'), padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0')),'SessionHostRegistration')]"
            ],            
            "copy": {
                "name": "Session-Host-IaaSAntimalware-Loop",
                "count": "[parameters('SessionHostsNumberToDeploy')]"
            },
            "condition": "[equals(parameters('SessionHostEnableIaaSAntimalware'),true())]",
            "properties": {
                "publisher": "Microsoft.Azure.Security",
                "type": "IaaSAntimalware",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "AntimalwareEnabled": true,
                    "Exclusions": {
                        "Extensions": "",
                        "Paths": "",
                        "Processes": ""
                    },
                    "RealtimeProtectionEnabled" : "true",
                    "ScheduledScanSettings": {
                        "isEnabled": "false",
                        "scanType": "Quick",
                        "day": "7",
                        "time": "120"
                    }
                },
                "protectedSettings": null
            }
        },

        {
            // Enable BitLocker OS Disk Encryption.
            // https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/azure-disk-enc-windows
            // https://azsec.azurewebsites.net/2019/12/28/azure-disk-encryption-arm-template-for-windows-vm/
            "type":"Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('SessionHostNamePrefix'),padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0'),'/diskEncryption')]",
            "apiVersion": "2020-12-01",
            "location": "[parameters('SessionHostLocation')]",
            //"dependsOn": ["Session-Host-Registration-Loop"],
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions',concat(parameters('SessionHostNamePrefix'), padLeft(add(copyIndex(),parameters('SessionHostNameInitialNumber')),parameters('SessionHostNumberPadding'),'0')),'SessionHostRegistration')]"
            ],            
            "copy": {
                "name": "Session-Host-BitLocker-Loop",
                "count": "[parameters('SessionHostsNumberToDeploy')]"
            },            
            "condition": "[equals(parameters('SessionHostEnableBitLocker'),true())]",
            "properties": {
                "publisher": "Microsoft.Azure.Security",
                "type": "AzureDiskEncryption",
                "typeHandlerVersion": "2.2",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "EncryptionOperation":"EnableEncryption",
                    "KeyEncryptionAlgorithm":"[parameters('SessionHostBitLockerKeyEncryptionAlgorithm')]",
                    "KeyVaultURL": "[parameters('BitLockerKeyVaultURL')]",
                    "KeyVaultResourceId": "[parameters('BitlockerKeyVaultResourceId')]",
                    "VolumeType": "OS" // All, OS or Data
                }
            }
        }
    ],
    "outputs": {}
}